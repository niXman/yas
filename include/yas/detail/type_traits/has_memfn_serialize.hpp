
// Copyright (c) 2010-2023 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__detail__type_traits__has_memfn_serialize_hpp
#define __yas__detail__type_traits__has_memfn_serialize_hpp

#include <type_traits>

namespace yas {
namespace detail {

/***************************************************************************/

template<typename ...T>
using void_t = void;

template<bool is_fundamental, bool is_enum, typename Ar, typename T, typename = void>
struct has_memfn_serializer: std::false_type {};

template<typename Ar, typename T>
struct has_memfn_serializer<
  false,
  false,
  Ar,
  T,
  // Ignore the `T::serialize()` method return type
  void_t<decltype(std::declval<T>().serialize(std::declval<void(Ar)>()))>
> : std::true_type { };

/***************************************************************************/

template<bool is_fundamental, bool is_enum, typename Ar, typename T, typename = void>
struct has_const_memfn_serializer: std::false_type {};

template<typename Ar, typename T>
struct has_const_memfn_serializer<
  false,
  false,
  Ar,
  T,
  // Ignore the `T::serialize() const` method return type
  void_t<decltype(std::declval<const T>().serialize(std::declval<void(Ar)>()))>
> : std::true_type { };

/***************************************************************************/

} // namespace detail
} // namespace yas

#endif // __yas__detail__type_traits__has_memfn_serialize_hpp
