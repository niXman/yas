// Copyright (c) 2010-2014 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas__mem_streams_hpp
#define _yas__mem_streams_hpp

#include <yas/detail/config/config.hpp>
#include <yas/detail/tools/noncopyable.hpp>
#include <yas/buffers.hpp>

#include <cmath>

namespace yas {

/***************************************************************************/

struct mem_ostream: private detail::noncopyable {
	mem_ostream(std::size_t reserved = 1024)
		:buf(reserved)
		,beg(buf.data.get())
		,cur(buf.data.get())
		,end(buf.data.get()+buf.size)
	{}
	mem_ostream(void *ptr, std::size_t size)
		:buf()
		,beg((char*)ptr)
		,cur((char*)ptr)
		,end((char*)ptr+size)
	{}

	template<typename T>
	std::size_t write(const T *ptr, const std::size_t size) {
		if ( cur+size > end ) {
			shared_buffer::shared_array_type prev = buf.data;
			const std::size_t olds = cur - beg;
			const std::size_t news = size + (olds * ((1 + std::sqrt(5)) / 1.5));

			buf = shared_buffer(news);
			std::memcpy(buf.data.get(), prev.get(), olds);

			beg = buf.data.get();
			cur = beg+olds;
			end = beg+news;
		}

		switch ( size ) {
			case sizeof(std::int8_t):
				*cur = *((std::int8_t*)ptr);
			break;
			case sizeof(std::int16_t):
				*((std::int16_t*)cur) = *((std::int16_t*)ptr);
			break;
			case sizeof(std::int32_t):
				*((std::int32_t*)cur) = *((std::int32_t*)ptr);
			break;
			case sizeof(std::int64_t):
				*((std::int64_t*)cur) = *((std::int64_t*)ptr);
			break;
			default:
				std::memcpy(cur, ptr, size);
		}
		cur += size;

		return size;
	}

	shared_buffer get_shared_buffer() const { return shared_buffer(buf.data, cur-beg); }
	intrusive_buffer get_intrusive_buffer() const { return intrusive_buffer(beg, cur-beg); }

private:
	shared_buffer buf;
	char *beg, *cur, *end;
}; // struct mem_ostream

/***************************************************************************/

struct mem_istream: private detail::noncopyable {
	mem_istream(const void *ptr, std::size_t size)
		:beg((const char*)ptr)
		,cur((const char*)ptr)
		,end((const char*)ptr+size)
	{}
	mem_istream(const intrusive_buffer &buf)
		:beg(buf.data)
		,cur(buf.data)
		,end(buf.data+buf.size)
	{}
	mem_istream(const shared_buffer &buf)
		:beg(buf.data.get())
		,cur(buf.data.get())
		,end(buf.data.get()+buf.size)
	{}

	template<typename T>
	std::size_t read(T *ptr, const std::size_t size) {
		const std::size_t copy = std::min(((std::size_t)(end-cur)), size);
		switch ( copy ) {
			case sizeof(std::int8_t):
				*((std::int8_t*)ptr) = *cur;
			break;
			case sizeof(std::int16_t):
				*((std::int16_t*)ptr) = *((std::int16_t*)cur);
			break;
			case sizeof(std::int32_t):
				*((std::int32_t*)ptr) = *((std::int32_t*)cur);
			break;
			case sizeof(std::int64_t):
				*((std::int64_t*)ptr) = *((std::int64_t*)cur);
			break;
			default:
				std::memcpy(ptr, cur, copy);
		}
		cur += copy;

		return copy;
	}

private:
	const char *beg, *cur, *end;
}; // struct mem_istream

/***************************************************************************/

} // ns yas

#endif // _yas__mem_streams_hpp
